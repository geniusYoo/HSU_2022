import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.FileDialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.Socket;
import java.security.PublicKey;
import java.util.HashMap;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Window;
import java.awt.Color;
import java.awt.Component;

import javax.swing.border.BevelBorder;
import javax.swing.border.LineBorder;

import org.w3c.dom.css.RGBColor;

import javax.swing.JToggleButton;
import javax.swing.JList;

public class ChatClient extends JFrame {
	private static final long serialVersionUID = 1L;
	private JPanel contentPane;
	private JTextField txtInput;
	private String UserName;
	private static final int BUF_LEN = 128; // Windows 처럼 BUF_LEN 을 정의
	private Socket socket; // 연결소켓

	private ObjectInputStream ois;
	private ObjectOutputStream oos;

	private Frame frame;
	private FileDialog fd;
	private JButton imgBtn;

	// TabBar 구성하는 변수들
	private JPanel tabBarPanel;
	public JPanel userListPanel;
	private JPanel roomListPanel;
	public JPanel othersProfilePanel;
	public JButton userListButton;
	private JButton roomListButton;
	private JButton exitButton;
	private JButton makeChatButton;
	
	private String selectedUserList;
	JTextPane textArea;
	JTextField textInput;
	
	public JDialog userDialog;
	private Vector<String> userVector = new Vector<>();
	private String [] users  = null;
	public ImageIcon userIcon;
	public UserList userList;
	public Vector<UserRoom> userRoomVector = new Vector<>();
	public HashMap<String, ImageIcon> userMap = new HashMap<>();
	public ImageIcon defaultImgIcon = new ImageIcon(ChatClient.class.getResource("/icons/default_profile.jpeg"));
	
	ChatClient chatClient;
	ChatClientRoom ChatClientRoom;
	UserRoom userRoom;
	
	public ChatClient(String username, String ip_addr, String port_no) {
		chatClient = this;
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 400, 630);
		setVisible(true);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		frame = this;
		UserName = username;
//		makeChatButton.setVisible(false);

		try {
			socket = new Socket(ip_addr, Integer.parseInt(port_no));

			oos = new ObjectOutputStream(socket.getOutputStream());
			oos.flush();
			ois = new ObjectInputStream(socket.getInputStream());

			//SendMessage("/login " + UserName);
			ChatMsg obcm = new ChatMsg(username, "100", "0", "0", "Hello");
			obcm.setImg(defaultImgIcon);
			SendObject(obcm);
			userVector.add(username);
			userMap.put(username, defaultImgIcon);

			makeTabBar(); // TabBar 구성하기
			makeUserListPanel(username);
			makeRoomListPanel();
			
			ListenNetwork net = new ListenNetwork();
			net.start();

		} catch (NumberFormatException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			AppendText("connect error");
		}
		
		makeChatButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				userList = new UserList(frame, "dialog");
				userList.setVisible(false);
				userList.setUsers(userVector);						
				selectedUserList = userList.showDialog();
 				
 				// userList Dialog 띄우고 선택되면 방 만들어달라고 서버에게 요청
 				String msg = selectedUserList;
 				ChatMsg obcm = new ChatMsg(UserName, "300", "0", msg, "request make room from client");
 				
 				try {
					oos.writeObject(obcm);
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}				
			}
		});
		
	}
	public void makeTabBar() {
		tabBarPanel = new JPanel();
		tabBarPanel.setLayout(new GridLayout(8, 1, 0, 0));
		tabBarPanel.setBounds(0, 0, 100, 602);
		tabBarPanel.setBackground(new Color(220, 220, 220));
		contentPane.add(tabBarPanel);
		
		userListButton = new JButton("");
		tabBarPanel.add(userListButton);
		
		roomListButton = new JButton("");
		tabBarPanel.add(roomListButton);
		
		exitButton = new JButton("");
		tabBarPanel.add(exitButton);
		
		ImageIcon personIcon = new ImageIcon(ChatClient.class.getResource("/icons/person.png"));
        Image personImg = personIcon.getImage();
        Image updatePersonImg = personImg.getScaledInstance(25, 25, Image.SCALE_SMOOTH);
        ImageIcon updatePersonIcon = new ImageIcon(updatePersonImg);
        
        ImageIcon chatIcon = new ImageIcon(ChatClient.class.getResource("/icons/chat.png"));
        Image chatImg = chatIcon.getImage();
        Image updateChatImg = chatImg.getScaledInstance(25, 25, Image.SCALE_SMOOTH);
        ImageIcon updateChatIcon = new ImageIcon(updateChatImg);
        
        ImageIcon exitIcon = new ImageIcon(ChatClient.class.getResource("/icons/exit.png"));
        Image exitImg = exitIcon.getImage();
        Image updateExitImg = exitImg.getScaledInstance(25, 25, Image.SCALE_SMOOTH);
        ImageIcon updateExitIcon = new ImageIcon(updateExitImg);

        userListButton.setIcon(updatePersonIcon);
        userListButton.setBorderPainted(false);
        userListButton.setContentAreaFilled(false);
        userListButton.addActionListener(listener);
        
        roomListButton.setIcon(updateChatIcon);
        roomListButton.setBorderPainted(false);
        roomListButton.setContentAreaFilled(false);
        roomListButton.addActionListener(listener);
        
        exitButton.setIcon(exitIcon);
        exitButton.setBorderPainted(false);
        exitButton.setContentAreaFilled(false);
        exitButton.addActionListener(listener);

	}
	
	// 처음 로딩될 때 자신의 프로필을 userListPanel에 붙이는 과정
	public void makeUserListPanel(String username) {
		userListPanel = new JPanel();
		userListPanel.setLayout(null);
		contentPane.add(userListPanel);
		userListPanel.setBounds(100, 0, 300, 600);

		JPanel myProfilePanel = new JPanel();
		myProfilePanel.setLayout(null);
		userListPanel.add(myProfilePanel);
		myProfilePanel.setBounds(0, 0, 300, 170);

		JLabel lblFriendsLabel = new JLabel("친구");
		lblFriendsLabel.setBounds(20, 20, 280, 40);
		lblFriendsLabel.setFont(new Font("D2Coding",Font.BOLD, 20));
		myProfilePanel.add(lblFriendsLabel);
		
		ImageIcon icon = userMap.get(username);
		UserProfile user = new UserProfile(username, icon); 

		myProfilePanel.add(user);
		user.setLayout(null);
		user.setBounds(0,60,300,50);
		user.add(user.profilePane);
		
		JLabel lblLabel = new JLabel("친구 목록");
		lblLabel.setBounds(20, 130, 100, 40);
		lblLabel.setFont(new Font("D2Coding",Font.PLAIN, 15));
		myProfilePanel.add(lblLabel);
		
		othersProfilePanel = new JPanel();
		othersProfilePanel.setLayout(new GridLayout(8,1));
		othersProfilePanel.setBounds(0,170,300,440);
		userListPanel.add(othersProfilePanel);
	}
	
	public void updateProfile(String username) {
		System.out.println(">>>>>> HASHMAP!!!!!!!"+userMap.get(username));

		ImageIcon icon2 = userMap.get(username);
		UserProfile otherUser = new UserProfile(chatClient,username, icon2);
		
		System.out.println(">>>>>> "+username);
		othersProfilePanel.add(otherUser);
		System.out.println(">>>> add success "+username);
		otherUser.setLayout(null);
		otherUser.setBounds(0,170,300,440);

		otherUser.add(otherUser.profilePane);	
		userListPanel.revalidate();
	}
	
	public void deleteProfile(String username) {
		for(int i = 0;i<userVector.size();i++) {
			if(userVector.elementAt(i).equals(username)) {
				if(i==0)othersProfilePanel.remove(0);
				else othersProfilePanel.remove(i-1);
				break;
			}
		}
		othersProfilePanel.revalidate();
		othersProfilePanel.repaint();
	}
	
	public void makeRoomListPanel() {
		roomListPanel = new JPanel();
		roomListPanel.setBounds(100, 0, 300, 600);
		roomListPanel.setLayout(null);
		contentPane.add(roomListPanel);
		
		JLabel lblChatLabel = new JLabel("채팅");
		lblChatLabel.setBounds(20, 20, 50, 40);
		lblChatLabel.setFont(new Font("D2Coding",Font.BOLD, 20));
		roomListPanel.add(lblChatLabel);
		
		// 새로운 채팅 만드는 버튼 만들기 
		makeChatButton = new JButton("");
		makeChatButton.setBounds(230, 20, 50, 40);
		ImageIcon chatIcon = new ImageIcon(ChatClient.class.getResource("/icons/plus_chat.png"));
        Image chatImg = chatIcon.getImage();
        Image updateChatImg = chatImg.getScaledInstance(25, 25, Image.SCALE_SMOOTH);
        ImageIcon updateChatIcon = new ImageIcon(updateChatImg);
        makeChatButton.setIcon(updateChatIcon);
        makeChatButton.setBorderPainted(false);
        makeChatButton.setContentAreaFilled(false);
		roomListPanel.add(makeChatButton);
        makeChatButton.addActionListener(listener);
	}
	
	public void updateRoomList(UserRoom userRoom) {
		userRoomVector.add(userRoom);
		int roomCount = userRoomVector.size();
		System.out.println("update Room >>>>" + roomCount);
		userRoom.setBounds(0,70*roomCount,300,60);
		System.out.println("userRoom.username >>>> " + userRoom.username);
		userRoom.chatRoomNameButton.setText(userRoom.userList);
		roomListPanel.add(userRoom);
		
		roomListPanel.repaint();
	}
	
	public void updateProfileImage(String username, ImageIcon icon) {
		userMap.put(username, icon);
		updateProfile(username);
	}
	public ImageIcon getUserIcon(String username) {
		return userIcon;
	}
	ActionListener listener = new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			if(userListButton.equals(e.getSource())) {		
				userListPanel.setVisible(true);
				roomListPanel.setVisible(false);
			}
			else if(roomListButton.equals(e.getSource())) {
				userListPanel.setVisible(false);
				roomListPanel.setVisible(true);
			}
			else if(exitButton.equals(e.getSource())) {
				String msg = UserName + "님이 퇴장하였습니다"; 
				ChatMsg cm = new ChatMsg(UserName, "600", "0", "0", msg);
				SendObject(cm);
				System.exit(0);
			}
		}
	};
	
	
	// Server Message를 수신해서 화면에 표시
	class ListenNetwork extends Thread {
		public void run() {
			while (true) {
				try {					
					Object obcm = null;
					String msg = null;
					ChatMsg cm = null;
					try {
						obcm = ois.readObject();
					} catch (ClassNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						break;
					}
					if (obcm == null)
						break;
					if (obcm instanceof ChatMsg) {
						cm = (ChatMsg) obcm;
					
					} else
						continue;
					switch (cm.getCode()) {
						case "100":
							System.out.println("enter chatting");
							break;
						case "101":
							System.out.println("101");
							System.out.println(cm.getData());
							userMap.put(cm.getData(), cm.getImg());
							updateProfile(cm.getData());
							userVector.add(cm.getData());
							
							break;
						case "102": // Logout User (delete profile)
							System.out.println("102");
							System.out.println(">>> who is logout "+cm.getData());
							deleteProfile(cm.getData());
							for(int i = 0;i<userVector.size();i++) {
								if(userVector.elementAt(i).equals(cm.getData())) {
									userVector.remove(i);
								}
							}
							for(int i=0; i<userRoomVector.size(); i++) {
								if(cm.room_id.equals(userRoomVector.elementAt(i).room_id)) {
									System.out.println("logout ***********");
									userRoomVector.elementAt(i).AppendText(cm);
								}
							}
							
						case "103": // profile image change
							
						case "200": // chat message
							System.out.println("vector size ?>>> " + userRoomVector.size());
							for(int i=0; i<userRoomVector.size(); i++) {
								if(cm.room_id.equals(userRoomVector.elementAt(i).room_id)) {
									System.out.println("i find room!!!!");
									userRoomVector.elementAt(i).AppendText(cm);
								}
							}
							break;
						case "201": // Image 첨부
							System.out.println("vector size ?>>> " + userRoomVector.size());
							for(int i=0; i<userRoomVector.size(); i++) {
								if(cm.room_id.equals(userRoomVector.elementAt(i).room_id)) {
									System.out.println("i find room!!!!");
									userRoomVector.elementAt(i).AppendImage(cm);
								}
							}
							break;
						case "301": // 서버에서 방을 만들어서 room_id를 내려줌
							System.out.println("Create Room --");
							System.out.println("room_id from server " + cm.getRoomId());
							userRoom = new UserRoom(chatClient, userIcon, UserName, cm.getRoomId(), cm.getUserList(), "채팅방이 생성되었습니다.", " ");
							updateRoomList(userRoom);
							
						case "600":
							for(int i=0; i<userRoomVector.size(); i++) {
								if(cm.room_id.equals(userRoomVector.elementAt(i).room_id)) {
									System.out.println("logout message" + cm.getData());
									userRoomVector.elementAt(i).AppendText(cm);
								}
							}
							break;

					}
				} catch (IOException e) {
					AppendText("ois.readObject() error");
					try {
						ois.close();
						oos.close();
						socket.close();

						break;
					} catch (Exception ee) {
						break;
					} // catch문 끝
				} // 바깥 catch문끝

			}
		}
	}

//	// keyboard enter key 치면 서버로 전송
//	class TextSendAction implements ActionListener {
//		@Override
//		public void actionPerformed(ActionEvent e) {
//			// Send button을 누르거나 메시지 입력하고 Enter key 치면
//			if (e.getSource() == btnSend || e.getSource() == txtInput) {
//				String msg = null;
//				// msg = String.format("[%s] %s\n", UserName, txtInput.getText());
//				msg = txtInput.getText();
//				SendMessage(msg);
//				txtInput.setText(""); // 메세지를 보내고 나면 메세지 쓰는창을 비운다.
//				txtInput.requestFocus(); // 메세지를 보내고 커서를 다시 텍스트 필드로 위치시킨다
//				if (msg.contains("/exit")) // 종료 처리
//					System.exit(0);
//			}
//		}
//	}

//	class ImageSendAction implements ActionListener {
//		@Override
//		public void actionPerformed(ActionEvent e) {
//			// 액션 이벤트가 sendBtn일때 또는 textField 에세 Enter key 치면
//			if (e.getSource() == imgBtn) {
//				frame = new Frame("이미지첨부");
//				fd = new FileDialog(frame, "이미지 선택", FileDialog.LOAD);
//				// frame.setVisible(true);
//				// fd.setDirectory(".\\");
//				fd.setVisible(true);
//				//System.out.println(fd.getDirectory() + fd.getFile());
//				ChatMsg obcm = new ChatMsg(UserName, "300", "IMG");
//				ImageIcon img = new ImageIcon(fd.getDirectory() + fd.getFile());
//				obcm.setImg(img);
//				SendObject(obcm);
//			}
//		}
//	}

	public void AppendIcon(ImageIcon icon) {
		int len = textArea.getDocument().getLength();
		// 끝으로 이동
		textArea.setCaretPosition(len);
		textArea.insertIcon(icon);
	}

	// 화면에 출력
	public void AppendText(String msg) {
//		msg = msg.trim(); // 앞뒤 blank와 \n을 제거한다.
//		int len = textArea.getDocument().getLength();
//		// 끝으로 이동
//		textArea.setCaretPosition(len);
//		textArea.replaceSelection(msg + "\n");
	}

	public void AppendImage(ImageIcon ori_icon) {
		int len = textArea.getDocument().getLength();
		textArea.setCaretPosition(len); // place caret at the end (with no selection)
		Image ori_img = ori_icon.getImage();
		int width, height;
		double ratio;
		width = ori_icon.getIconWidth();
		height = ori_icon.getIconHeight();
		// Image가 너무 크면 최대 가로 또는 세로 200 기준으로 축소시킨다.
		if (width > 200 || height > 200) {
			if (width > height) { // 가로 사진
				ratio = (double) height / width;
				width = 200;
				height = (int) (width * ratio);
			} else { // 세로 사진
				ratio = (double) width / height;
				height = 200;
				width = (int) (height * ratio);
			}
			Image new_img = ori_img.getScaledInstance(width, height, Image.SCALE_SMOOTH);
			ImageIcon new_icon = new ImageIcon(new_img);
			textArea.insertIcon(new_icon);
		} else
			textArea.insertIcon(ori_icon);
		len = textArea.getDocument().getLength();
		textArea.setCaretPosition(len);
		textArea.replaceSelection("\n");
		// ImageViewAction viewaction = new ImageViewAction();
		// new_icon.addActionListener(viewaction); // 내부클래스로 액션 리스너를 상속받은 클래스로
	}

	// Windows 처럼 message 제외한 나머지 부분은 NULL 로 만들기 위한 함수
	public byte[] MakePacket(String msg) {
		byte[] packet = new byte[BUF_LEN];
		byte[] bb = null;
		int i;
		for (i = 0; i < BUF_LEN; i++)
			packet[i] = 0;
		try {
			bb = msg.getBytes("euc-kr");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.exit(0);
		}
		for (i = 0; i < bb.length; i++)
			packet[i] = bb[i];
		return packet;
	}

//	// Server에게 network으로 전송
//	public void SendMessage(String msg) {
//		try {
//			// dos.writeUTF(msg);
////			byte[] bb;
////			bb = MakePacket(msg);
////			dos.write(bb, 0, bb.length);
//			ChatMsg obcm = new ChatMsg(UserName, "200", msg);
//			oos.writeObject(obcm);
//		} catch (IOException e) {
//			// AppendText("dos.write() error");
//			AppendText("oos.writeObject() error");
//			try {
////				dos.close();
////				dis.close();
//				ois.close();
//				oos.close();
//				socket.close();
//			} catch (IOException e1) {
//				// TODO Auto-generated catch block
//				e1.printStackTrace();
//				System.exit(0);
//			}
//		}
//	}

	public void SendObject(Object ob) { // 서버로 메세지를 보내는 메소드
		try {
			oos.writeObject(ob);
		} catch (IOException e) {
			// textArea.append("메세지 송신 에러!!\n");
			AppendText("SendObject Error");
		}
	}
}
